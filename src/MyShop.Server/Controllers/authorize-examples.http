### [Authorize] Examples - Real World Scenarios

### ============================================
### Setup
### ============================================
@host = http://localhost:5228
@userToken = 
@adminToken = 

### ============================================
### 1. PUBLIC Endpoints (No [Authorize])
### ============================================

### Register - Anyone can register
POST {{host}}/api/v1/auth/register
Content-Type: application/json

{
  "username": "newuser",
  "email": "newuser@example.com",
  "password": "password123",
  "sdt": "0123456789"
}

###

### Login - Anyone can login
POST {{host}}/api/v1/auth/login
Content-Type: application/json

{
  "usernameOrEmail": "newuser@example.com",
  "password": "password123"
}

### Copy token from response ? and paste to @userToken

###

### View Products - Public endpoint
GET {{host}}/api/v1/products

###

### ============================================
### 2. BASIC [Authorize] - Need Authentication
### ============================================

### Get My Profile - Need valid token
GET {{host}}/api/v1/auth/me
Authorization: Bearer {{userToken}}

###

### Test without token - Should return 401 Unauthorized
GET {{host}}/api/v1/auth/me

###

### ============================================
### 3. [Authorize(Roles = "Admin")] - Admin Only
### ============================================

### Login as Admin first
POST {{host}}/api/v1/auth/login
Content-Type: application/json

{
  "usernameOrEmail": "admin@example.com",
  "password": "admin123"
}

### Copy admin token from response ? and paste to @adminToken

###

### Delete User - Admin only
DELETE {{host}}/api/v1/users/3fa85f64-5717-4562-b3fc-2c963f66afa6
Authorization: Bearer {{adminToken}}

###

### Test with user token - Should return 403 Forbidden
DELETE {{host}}/api/v1/users/3fa85f64-5717-4562-b3fc-2c963f66afa6
Authorization: Bearer {{userToken}}

###

### ============================================
### 4. [Authorize(Roles = "Admin,Manager")] - Multiple Roles (OR)
### ============================================

### View Reports - Admin OR Manager can access
GET {{host}}/api/v1/admin/reports
Authorization: Bearer {{adminToken}}

###

### Test with regular user - Should return 403
GET {{host}}/api/v1/admin/reports
Authorization: Bearer {{userToken}}

###

### ============================================
### 5. [Authorize(Policy = "...")] - Custom Policy
### ============================================

### Delete Product - Need Admin role + DELETE authority
DELETE {{host}}/api/v1/products/3fa85f64-5717-4562-b3fc-2c963f66afa6
Authorization: Bearer {{adminToken}}

###

### Create Article - Need Admin OR (Manager + POST authority)
POST {{host}}/api/v1/admin/articles
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "title": "Test Article",
  "content": "Article content"
}

###

### ============================================
### 6. Testing Different Scenarios
### ============================================

### Scenario 1: Valid token, correct role
GET {{host}}/api/v1/auth/me
Authorization: Bearer {{adminToken}}
# Expected: 200 OK

###

### Scenario 2: Valid token, wrong role
DELETE {{host}}/api/v1/users/guid
Authorization: Bearer {{userToken}}
# Expected: 403 Forbidden

###

### Scenario 3: No token
GET {{host}}/api/v1/auth/me
# Expected: 401 Unauthorized

###

### Scenario 4: Invalid token
GET {{host}}/api/v1/auth/me
Authorization: Bearer invalid_token_here
# Expected: 401 Unauthorized

###

### Scenario 5: Expired token
GET {{host}}/api/v1/auth/me
Authorization: Bearer {{expiredToken}}
# Expected: 401 Unauthorized (token expired after 5 minutes)

###

### ============================================
### Authorization Error Responses
### ============================================

### 401 Unauthorized - No token or invalid token
# {
#   "code": 401,
#   "message": "Unauthorized",
#   "result": null,
#   "success": false
# }

### 403 Forbidden - Valid token but insufficient permissions
# {
#   "code": 403,
#   "message": "Forbidden",
#   "result": null,
#   "success": false
# }

### ============================================
### Controller Examples
### ============================================

### Example 1: Public Controller
# [ApiController]
# [Route("api/v1/products")]
# public class ProductController : ControllerBase
# {
#     // No [Authorize] - Anyone can view
#     [HttpGet]
#     public async Task<IActionResult> GetProducts()
#     {
#         // Public endpoint
#     }
# }

### Example 2: Protected Controller with public exception
# [ApiController]
# [Route("api/v1/users")]
# [Authorize] // ? All endpoints need auth
# public class UserController : ControllerBase
# {
#     // Inherited [Authorize]
#     [HttpGet]
#     public async Task<IActionResult> GetUsers()
#     {
#         // Protected
#     }
#     
#     // Override with [AllowAnonymous]
#     [HttpGet("public/{id}")]
#     [AllowAnonymous]
#     public async Task<IActionResult> GetPublicProfile(Guid id)
#     {
#         // Public despite controller [Authorize]
#     }
# }

### Example 3: Role-based endpoints
# [ApiController]
# [Route("api/v1/admin")]
# public class AdminController : ControllerBase
# {
#     [HttpGet("users")]
#     [Authorize(Roles = "Admin")]
#     public async Task<IActionResult> GetAllUsers()
#     {
#         // Admin only
#     }
#     
#     [HttpGet("reports")]
#     [Authorize(Roles = "Admin,Manager")]
#     public async Task<IActionResult> GetReports()
#     {
#         // Admin OR Manager
#     }
#     
#     [HttpPost("critical")]
#     [Authorize(Roles = "Admin")]
#     [Authorize(Policy = "HasAllAuthority")]
#     public async Task<IActionResult> CriticalAction()
#     {
#         // Admin role AND ALL authority
#     }
# }

### ============================================
### Policy Configuration (Program.cs)
### ============================================

# builder.Services.AddAuthorization(options =>
# {
#     // Policy: Require Admin + ALL authority
#     options.AddPolicy("SuperAdmin", policy =>
#     {
#         policy.RequireRole("Admin");
#         policy.RequireClaim("authority", "ALL");
#     });
#     
#     // Policy: Require DELETE authority
#     options.AddPolicy("CanDelete", policy =>
#     {
#         policy.RequireClaim("authority", "DELETE");
#     });
#     
#     // Policy: Require Admin OR Manager
#     options.AddPolicy("Management", policy =>
#     {
#         policy.RequireRole("Admin", "Manager");
#     });
# });

### ============================================
### Quick Reference
### ============================================

# No [Authorize]              ? Public (login, register, view products)
# [Authorize]                 ? Need valid token (view profile, my orders)
# [Authorize(Roles = "Admin")] ? Need Admin role (delete users, system config)
# [Authorize(Roles = "A,B")]  ? Need role A OR B (reports, analytics)
# Multiple [Authorize]        ? Need ALL specified roles/claims
# [Authorize(Policy = "...")]  ? Custom authorization logic
# [AllowAnonymous]            ? Override controller/global [Authorize]