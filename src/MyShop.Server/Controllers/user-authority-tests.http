### User Authority Management API Tests
### Base URL Configuration
@host = https://localhost:7001
@userId = 3fa85f64-5717-4562-b3fc-2c963f66afa6

### ============================================
### 1. Get Effective Authorities for User
### Shows all authorities user has after subtracting removed authorities
### ============================================
GET {{host}}/api/v1/users/{{userId}}/authorities/effective
Content-Type: application/json

###

### ============================================
### 2. Check if User Has Specific Authority
### Returns true/false with reason
### ============================================
GET {{host}}/api/v1/users/{{userId}}/authorities/check/DELETE
Content-Type: application/json

###

GET {{host}}/api/v1/users/{{userId}}/authorities/check/POST
Content-Type: application/json

###

GET {{host}}/api/v1/users/{{userId}}/authorities/check/ALL
Content-Type: application/json

###

### ============================================
### 3. Get All Removed Authorities for User
### Shows list of authorities that have been restricted
### ============================================
GET {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

###

### ============================================
### 4. Add Authority to Removed List (Restrict)
### Removes DELETE authority from user
### ============================================
POST {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "DELETE",
  "reason": "Temporary restriction during audit period",
  "removedBy": "admin_user"
}

###

### ============================================
### 5. Add Another Authority to Removed List
### Removes POST authority from user
### ============================================
POST {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "POST",
  "reason": "Security policy violation - pending investigation",
  "removedBy": "security_admin"
}

###

### ============================================
### 6. Try to Add Already Removed Authority (Should Fail)
### Should return 400 error
### ============================================
POST {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "DELETE",
  "reason": "Testing duplicate"
}

###

### ============================================
### 7. Try to Remove Non-existent Authority (Should Fail)
### Should return 400 error
### ============================================
POST {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "INVALID_AUTHORITY",
  "reason": "Testing validation"
}

###

### ============================================
### 8. Restore Authority (Remove from Removed List)
### Restores DELETE authority to user
### ============================================
DELETE {{host}}/api/v1/users/{{userId}}/authorities/removed/DELETE

###

### ============================================
### 9. Restore Another Authority
### Restores POST authority to user
### ============================================
DELETE {{host}}/api/v1/users/{{userId}}/authorities/removed/POST

###

### ============================================
### 10. Try to Restore Non-removed Authority (Should Return 404)
### ============================================
DELETE {{host}}/api/v1/users/{{userId}}/authorities/removed/NONEXISTENT

###

### ============================================
### Complete Test Workflow
### ============================================

### Step 1: Check initial effective authorities
GET {{host}}/api/v1/users/{{userId}}/authorities/effective

### Step 2: Remove DELETE authority
POST {{host}}/api/v1/users/{{userId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "DELETE",
  "reason": "Testing removal workflow",
  "removedBy": "test_admin"
}

### Step 3: Check effective authorities again (should not include DELETE)
GET {{host}}/api/v1/users/{{userId}}/authorities/effective

### Step 4: Check if user has DELETE authority (should be false)
GET {{host}}/api/v1/users/{{userId}}/authorities/check/DELETE

### Step 5: Check removed authorities list (should include DELETE)
GET {{host}}/api/v1/users/{{userId}}/authorities/removed

### Step 6: Restore DELETE authority
DELETE {{host}}/api/v1/users/{{userId}}/authorities/removed/DELETE

### Step 7: Verify restoration (should include DELETE again)
GET {{host}}/api/v1/users/{{userId}}/authorities/effective

###

### ============================================
### Test with Admin User (has ALL authority)
### ============================================
@adminUserId = 3fa85f64-5717-4562-b3fc-2c963f66afa7

### Admin should have ALL authority
GET {{host}}/api/v1/users/{{adminUserId}}/authorities/check/DELETE

### Remove ALL authority from admin
POST {{host}}/api/v1/users/{{adminUserId}}/authorities/removed
Content-Type: application/json

{
  "authorityName": "ALL",
  "reason": "Temporary admin privilege suspension",
  "removedBy": "super_admin"
}

### Check if admin still has DELETE (should be false now)
GET {{host}}/api/v1/users/{{adminUserId}}/authorities/check/DELETE

### Restore ALL authority
DELETE {{host}}/api/v1/users/{{adminUserId}}/authorities/removed/ALL

###

### ============================================
### Notes for Testing
### ============================================
# 1. Replace {{userId}} with actual user GUID from your database
# 2. Make sure user has at least one role with authorities
# 3. Available authorities in seed data: POST, DELETE, ALL
# 4. Roles in seed data:
#    - Admin: has ALL authority
#    - SalesAgent: has POST authority
# 5. Remember to create the database migration first:
#    dotnet ef migrations add AddRemovedAuthorities --project src/MyShop.Data
#    dotnet ef database update --project src/MyShop.Data
