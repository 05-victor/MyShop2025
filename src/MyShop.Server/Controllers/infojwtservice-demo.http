### InfoJwtService Demo - Extract Token Information
### Base URL Configuration
@host = https://localhost:7001
@token = your_jwt_token_here

### ============================================
### Setup: Login to get JWT Token
### ============================================
POST {{host}}/api/v1/auth/login
Content-Type: application/json

{
  "usernameOrEmail": "admin@example.com",
  "password": "admin123"
}

### Copy token from response above and paste to @token variable

### ============================================
### 1. Get Current User Info (Uses InfoJwtService internally)
### ============================================
GET {{host}}/api/v1/auth/me
Authorization: Bearer {{token}}

###

### ============================================
### Expected Token Claims Structure
### ============================================
# The JWT token contains:
# {
#   "nameid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",  // User ID - InfoJwtService.GetUserId()
#   "unique_name": "john_doe",                          // Username - InfoJwtService.GetUsername()
#   "email": "john@example.com",                        // Email - InfoJwtService.GetEmail()
#   "role": ["User", "Admin"],                          // Roles - InfoJwtService.GetRoles()
#   "authority": ["POST", "DELETE", "ALL"],             // Authorities - InfoJwtService.GetAuthorities()
#   "jti": "unique-token-id",                           // JWT ID - InfoJwtService.GetJti()
#   "iat": 1234567890,                                  // Issued At
#   "exp": 1234567890                                   // Expiration
# }

### ============================================
### How InfoJwtService is Used in GetMe
### ============================================
# AuthService.GetMeAsync() implementation:
#
# public async Task<UserInfoResponse?> GetMeAsync()
# {
#     var httpContext = _httpContextAccessor.HttpContext;
#     if (httpContext == null) return null;
#
#     // ?? Use InfoJwtService to extract user ID
#     var userId = InfoJwtService.GetUserId(httpContext.User);
#     
#     if (userId == null)
#     {
#         _logger.LogWarning("User ID not found in JWT token");
#         return null;
#     }
#
#     return await GetMeAsync(userId.Value);
# }

### ============================================
### Benefits of Using InfoJwtService
### ============================================
# ? Clean Code - No repetitive FindFirst() calls
# ? Type Safety - Returns Guid?, string?, List<string>
# ? Null Safety - Handles null cases properly
# ? Reusable - Use anywhere you need token info
# ? Maintainable - Logic centralized in one place

### ============================================
### InfoJwtService Methods Available
### ============================================
# InfoJwtService.GetUserId(user)         -> Guid?
# InfoJwtService.GetUsername(user)       -> string?
# InfoJwtService.GetEmail(user)          -> string?
# InfoJwtService.GetRoles(user)          -> List<string>
# InfoJwtService.GetAuthorities(user)    -> List<string>
# InfoJwtService.HasAuthority(user, "DELETE") -> bool
# InfoJwtService.GetJti(user)            -> string?

### ============================================
### Test Different Scenarios
### ============================================

### Scenario 1: Valid token with all claims
POST {{host}}/api/v1/auth/login
Content-Type: application/json

{
  "usernameOrEmail": "admin@example.com",
  "password": "admin123"
}

###

GET {{host}}/api/v1/auth/me
Authorization: Bearer {{token}}

###

### Scenario 2: Token without user (should fail)
GET {{host}}/api/v1/auth/me
Authorization: Bearer invalid_token

###

### Scenario 3: No token (should return 401)
GET {{host}}/api/v1/auth/me

###

### ============================================
### Comparison: Old vs New Approach
### ============================================

# ? OLD WAY (Before InfoJwtService):
# var userIdClaim = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
# if (string.IsNullOrEmpty(userIdClaim))
# {
#     return null;
# }
# if (!Guid.TryParse(userIdClaim, out var userId))
# {
#     return null;
# }
# return await GetMeAsync(userId);

# ? NEW WAY (With InfoJwtService):
# var userId = InfoJwtService.GetUserId(httpContext.User);
# if (userId == null) return null;
# return await GetMeAsync(userId.Value);

### ============================================
### Response Example
### ============================================
# {
#   "success": true,
#   "message": "User profile retrieved successfully",
#   "data": {
#     "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
#     "username": "admin",
#     "email": "admin@example.com",
#     "phoneNumber": "0123456789",
#     "createdAt": "2025-01-18T01:00:00Z",
#     "avatar": "https://...",
#     "activateTrial": false,
#     "isVerified": true,
#     "updatedAt": null,
#     "roleNames": ["Admin", "User"]
#   },
#   "statusCode": 200
# }

### ============================================
### Notes
### ============================================
# 1. InfoJwtService ???c s? d?ng internally trong AuthService.GetMeAsync()
# 2. Không c?n g?i tr?c ti?p InfoJwtService t? Controller
# 3. Service t? ??ng extract userId t? JWT token claims
# 4. Code s?ch h?n, d? maintain và test h?n
# 5. Xem INFOJWTSERVICE_GUIDE.md ?? bi?t chi ti?t v? các methods